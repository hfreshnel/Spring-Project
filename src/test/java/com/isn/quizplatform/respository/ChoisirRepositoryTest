package com.isn.quizplatform.repository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import com.isn.quizplatform.model.Choisir;

import static org.assertj.core.api.Assertions.assertThat;

@SpringBootTest
@ActiveProfiles("test") // Utilise application-test.properties
public class ChoisirRepositoryTests {

    @Autowired
    private ChoisirRepository choisirRepository;

    private Personne defaultPersonne1;
    private Personne defaultPersonne2;

    private Quiz defaultQuiz1;
    private Quiz defaultQuiz2;

    private Proposition defaultProposition;
    private List<Question> defaultQuestions;

    private Choisir defaultChoisir2;
    private Choisir savedChoisir;

    @BeforeEach
    public void setup() {
        choisirRepository.deleteAll(); // Nettoie la table avant chaque test

        Question question1 = new Question("Question 1");
        Question question2 = new Question("Question 2");
        Question question3 = new Question("Question 3");
        Question question4 = new Question("Question 4");

        defaultQuestions = new ArrayList<>();
        defaultQuestions.add(question1);
        defaultQuestions.add(question2);
        defaultQuestions.add(question3);
        defaultQuestions.add(question4);

        defaultPersonne1 = new Personne("Dupont", "Jean", "jean.dupont@example.com", "password123", 1);
        defaultPersonne1 = new Personne("John", "Jones", "kohn.jones@example.com", "1234", 1000);

        defaultQuiz = new Quiz("Quiz 1", 0, new Timestamp(System.currentTimeMillis()), 0, 1, new Timestamp(System.currentTimeMillis()), defaultQuestions);
        defaultProposition = new Proposition(0, "Proposition 1", 10L);


        defaultChoisir1 = new Choisir(defaultPersonne1, defaultQuiz1, new Timestamp(System.currentTimeMillis()));
        defaultChoisir2 = new Choisir(defaultPersonne2, defaultQuiz2, new Timestamp(System.currentTimeMillis()));

        savedChoisir = choisirRepository.save(defaultChoisir1);
    }


    @Test
    public void testSaveAndFindByMailChoisir() {
        // Given
        // When
        Choisir foundChoisir1 = choisirRepository.findByMail(defaultChoisir1.getMail()).orElse(null);
        Choisir foundChoisir2 = choisirRepository.findByMail(defaultChoisir2.getMail()).orElse(null);


        // Then
        assertThat(foundChoisir2).isNull();
        assertThat(foundChoisir1).isNotNull();
        assertThat(foundChoisir1.getId()).isNotNull();
        assertThat(foundChoisir1.getNom()).isEqualTo("Dupont");
        assertThat(foundChoisir1.getPrenom()).isEqualTo("Jean");
        assertThat(foundChoisir1.getMail()).isEqualTo("jean.dupont@example.com");
        assertThat(foundChoisir1.getMdp()).isEqualTo("password123");
        assertThat(foundChoisir1.getRole()).isEqualTo(1);
    }

    @Test
    public void testFindByIdChoisir() {
        // Given
        // When
        Choisir foundChoisir = choisirRepository.findById(savedChoisir.getId()).orElse(null);

        // Then
        assertThat(foundChoisir).isNotNull();
        assertThat(foundChoisir.getId()).isNotNull();
        assertThat(foundChoisir.getNom()).isEqualTo("Dupont");
        assertThat(foundChoisir.getPrenom()).isEqualTo("Jean");
        assertThat(foundChoisir.getMail()).isEqualTo("jean.dupont@example.com");
        assertThat(foundChoisir.getMdp()).isEqualTo("password123");
        assertThat(foundChoisir.getRole()).isEqualTo(1);
    }

    @Test
    public void testDelete() {
        // Given
        // When
        choisirRepository.delete(defaultChoisir1);
        Choisir foundChoisir = choisirRepository.findById(savedChoisir.getId()).orElse(null);

        // Then
        assertThat(foundChoisir).isNull();
    }
}